import json
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
WAITING_FOR_TERM = 1
WAITING_FOR_LETTER = 2


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    with open('it_terms.json', 'r', encoding='utf-8') as file:
        return json.load(file)["terms"]


data = load_data()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    keyboard = [["üìò –ù–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω", "üî† –¢–µ—Ä–º–∏–Ω—ã –Ω–∞ –±—É–∫–≤—É"],
                ["üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo_path = 'start.png'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with open(photo_path, 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption=(
                "üìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ IT-—Ç–µ—Ä–º–∏–Ω–∞–º!* üëã\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "üîπ –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞\n"
                "üîπ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É\n"
                "üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π IT-—Ç–µ—Ä–º–∏–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏ –Ω–∞—á–Ω—ë–º! üöÄ"
            ),
            parse_mode="Markdown",
            reply_markup=main_menu()
        )



# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ IT-—Ç–µ—Ä–º–∏–Ω–∞–º!\n\n"
        "üëá –í–æ—Ç —á—Ç–æ —è —É–º–µ—é: \n"
        "üìò –ù–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω ‚Äì –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω—ë–º.\n"
        "üî† –¢–µ—Ä–º–∏–Ω—ã –Ω–∞ –±—É–∫–≤—É ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –Ω–µ—ë.\n"
        "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω ‚Äì –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π IT-—Ç–µ—Ä–º–∏–Ω –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É: @bstrbzl –∏–ª–∏ zzz!.\n\n"
        "üòä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–± IT!"
    )


# –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞
async def start_term_search(update: Update, context: CallbackContext):
    await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'",
                                    reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True,
                                                                     one_time_keyboard=True))
    return WAITING_FOR_TERM


# –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞
async def search_term(update: Update, context: CallbackContext):
    term = update.message.text.lower()

    for letter, terms in data.items():
        for item in terms:
            if item["term"].lower() == term:
                await update.message.reply_text(f"{item['term']}: {item.get('definition', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                return WAITING_FOR_TERM

    await update.message.reply_text("‚ùå –¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
    return WAITING_FOR_TERM


async def exit_term_search(update: Update, context: CallbackContext):
    await update.message.reply_text("üîç –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu())
    return ConversationHandler.END


# –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ –±—É–∫–≤–µ
async def start_letter_search(update: Update, context: CallbackContext):
    await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'",
                                    reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True,
                                                                     one_time_keyboard=True))
    return WAITING_FOR_LETTER


# –ü–æ–∏—Å–∫ –ø–æ –±—É–∫–≤–µ
async def search_by_letter(update: Update, context: CallbackContext):
    letter = update.message.text.strip().upper()

    if letter in data and data[letter]:
        terms_list = "\n".join([item["term"] for item in data[letter]])
        await update.message.reply_text(f"–¢–µ—Ä–º–∏–Ω—ã –Ω–∞ '{letter}':\n{terms_list}")
    else:
        await update.message.reply_text(f"‚ùå –¢–µ—Ä–º–∏–Ω–æ–≤ –Ω–∞ –±—É–∫–≤—É '{letter}' –Ω–µ—Ç.")
    return WAITING_FOR_LETTER


async def exit_letter_search(update: Update, context: CallbackContext):
    await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu())
    return ConversationHandler.END


# –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω
async def random_term(update: Update, context: CallbackContext):
    valid_letters = [letter for letter in data.keys() if data[letter]]
    if not valid_letters:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞.")
        return
    random_letter = random.choice(valid_letters)
    random_item = random.choice(data[random_letter])
    await update.message.reply_text(f"{random_item['term']}: {random_item.get('definition', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    token = "8190966734:AAH5lCuJQURW6kWG4uKve2ax0-RRCbxfiiY"
    app = Application.builder().token(token).build()

    term_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìò –ù–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω"), start_term_search)],
        states={WAITING_FOR_TERM: [MessageHandler(filters.TEXT & ~filters.Regex("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), search_term)]},
        fallbacks=[MessageHandler(filters.Regex("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), lambda u, c: exit_term_search(u, c))]
    )

    letter_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üî† –¢–µ—Ä–º–∏–Ω—ã –Ω–∞ –±—É–∫–≤—É"), start_letter_search)],
        states={WAITING_FOR_LETTER: [MessageHandler(filters.TEXT & ~filters.Regex("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), search_by_letter)]},
        fallbacks=[MessageHandler(filters.Regex("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), lambda u, c: exit_letter_search(u, c))]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), help_command))
    app.add_handler(term_handler)
    app.add_handler(letter_handler)
    app.add_handler(MessageHandler(filters.Regex("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω"), random_term))

    app.run_polling()


if __name__ == "__main__":
    main()
